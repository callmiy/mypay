{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/phoenix/priv/static/phoenix.js","webpack:///./src/app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_typeof","iterator","obj","constructor","_slicedToArray","arr","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","sliceIterator","TypeError","_createClass","defineProperties","target","props","descriptor","configurable","writable","Constructor","protoProps","staticProps","_classCallCheck","instance","SOCKET_STATES","connecting","open","closing","closed","DEFAULT_TIMEOUT","CHANNEL_STATES","errored","joined","joining","leaving","CHANNEL_EVENTS","close","error","join","reply","leave","CHANNEL_LIFECYCLE_EVENTS","TRANSPORTS","longpoll","websocket","Push","channel","event","payload","timeout","this","receivedResp","timeoutTimer","recHooks","sent","reset","send","hasReceived","startTimeout","socket","topic","ref","join_ref","joinRef","status","callback","response","cancelRefEvent","refEvent","_ref","filter","h","forEach","off","clearTimeout","_this","cancelTimeout","makeRef","replyEventName","on","matchReceive","setTimeout","trigger","Channel","params","_this2","state","bindings","joinedOnce","joinPush","pushBuffer","rejoinTimer","Timer","rejoinUntilConnected","reconnectAfterMs","receive","pushEvent","onClose","log","remove","onError","reason","isLeaving","isClosed","scheduleTimeout","isJoining","leavePush","isConnected","rejoin","arguments","isJoined","canPush","_this3","isLifecycleEvent","indexOf","resend","sendJoin","_this4","handledPayload","onMessage","map","Serializer","encode","msg","JSON","stringify","decode","rawPayload","_JSON$parse","parse","_JSON$parse2","LongPoll","Socket","endPoint","_this5","opts","stateChangeCallbacks","message","channels","sendBuffer","transport","window","WebSocket","defaultEncoder","defaultDecoder","heartbeatIntervalMs","tries","logger","longpollerTimeout","heartbeatTimer","pendingHeartbeatRef","reconnectTimer","disconnect","connect","location","protocol","match","uri","Ajax","appendParams","vsn","charAt","host","code","conn","onclose","_this6","console","endPointURL","onopen","onConnOpen","onerror","onConnError","onmessage","onConnMessage","onConnClose","kind","data","_this7","flushSendBuffer","skipHeartbeat","clearInterval","setInterval","sendHeartbeat","triggerChanError","readyState","connectionState","chanParams","chan","_this8","result","newRef","toString","rawMessage","_this9","isMember","token","pollEndpoint","normalizeEndpoint","poll","replace","RegExp","closeAndRetry","_this10","request","endpointURL","ontimeout","resp","messages","body","_this11","method","accept","XDomainRequest","req","xdomainRequest","_req","XMLHttpRequest","ActiveXObject","xhrRequest","_this12","onload","parseJSON","responseText","onprogress","_this13","setRequestHeader","onreadystatechange","states","complete","e","parentKey","queryStr","paramKey","paramVal","serialize","encodeURIComponent","url","keys","prefix","Presence","syncState","currentState","newState","onJoin","onLeave","_this14","clone","joins","leaves","presence","newPresence","currentPresence","newRefs","metas","phx_ref","curRefs","joinedMetas","leftMetas","syncDiff","_ref2","_state$key$metas","unshift","apply","arr2","from","_toConsumableArray","leftPresence","refsToRemove","list","presences","chooser","pres","func","getOwnPropertyNames","timerCalc","timer","_this15","factory","phoenix__WEBPACK_IMPORTED_MODULE_0__","getSocket","channelJoin","_a","sendChannelMsg","channelName","ok","reasons","sidebarEl","document","getElementById","sidebar","containerEl","sidebarTriggerEl","addEventListener","evt","stopPropagation","classList","preventDefault","contains","sidebarAction"],"mappings":"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","file":"js/commons.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","(function (global, factory) {\ntypeof exports === 'object' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\nfactory(global.Phoenix = global.Phoenix || {});\n}(this, (function (exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Phoenix Channels JavaScript client\n *\n * ## Socket Connection\n *\n * A single connection is established to the server and\n * channels are multiplexed over the connection.\n * Connect to the server using the `Socket` class:\n *\n * ```javascript\n *     let socket = new Socket(\"/socket\", {params: {userToken: \"123\"}})\n *     socket.connect()\n * ```\n *\n * The `Socket` constructor takes the mount point of the socket,\n * the authentication params, as well as options that can be found in\n * the Socket docs, such as configuring the `LongPoll` transport, and\n * heartbeat.\n *\n * ## Channels\n *\n * Channels are isolated, concurrent processes on the server that\n * subscribe to topics and broker events between the client and server.\n * To join a channel, you must provide the topic, and channel params for\n * authorization. Here's an example chat room example where `\"new_msg\"`\n * events are listened for, messages are pushed to the server, and\n * the channel is joined with ok/error/timeout matches:\n *\n * ```javascript\n *     let channel = socket.channel(\"room:123\", {token: roomToken})\n *     channel.on(\"new_msg\", msg => console.log(\"Got message\", msg) )\n *     $input.onEnter( e => {\n *       channel.push(\"new_msg\", {body: e.target.val}, 10000)\n *        .receive(\"ok\", (msg) => console.log(\"created message\", msg) )\n *        .receive(\"error\", (reasons) => console.log(\"create failed\", reasons) )\n *        .receive(\"timeout\", () => console.log(\"Networking issue...\") )\n *     })\n *     channel.join()\n *       .receive(\"ok\", ({messages}) => console.log(\"catching up\", messages) )\n *       .receive(\"error\", ({reason}) => console.log(\"failed join\", reason) )\n *       .receive(\"timeout\", () => console.log(\"Networking issue. Still waiting...\") )\n *```\n *\n * ## Joining\n *\n * Creating a channel with `socket.channel(topic, params)`, binds the params to\n * `channel.params`, which are sent up on `channel.join()`.\n * Subsequent rejoins will send up the modified params for\n * updating authorization params, or passing up last_message_id information.\n * Successful joins receive an \"ok\" status, while unsuccessful joins\n * receive \"error\".\n *\n * ## Duplicate Join Subscriptions\n *\n * While the client may join any number of topics on any number of channels,\n * the client may only hold a single subscription for each unique topic at any\n * given time. When attempting to create a duplicate subscription,\n * the server will close the existing channel, log a warning, and\n * spawn a new channel for the topic. The client will have their\n * `channel.onClose` callbacks fired for the existing channel, and the new\n * channel join will have its receive hooks processed as normal.\n *\n * ## Pushing Messages\n *\n * From the previous example, we can see that pushing messages to the server\n * can be done with `channel.push(eventName, payload)` and we can optionally\n * receive responses from the push. Additionally, we can use\n * `receive(\"timeout\", callback)` to abort waiting for our other `receive` hooks\n *  and take action after some period of waiting. The default timeout is 5000ms.\n *\n *\n * ## Socket Hooks\n *\n * Lifecycle events of the multiplexed connection can be hooked into via\n * `socket.onError()` and `socket.onClose()` events, ie:\n *\n * ```javascript\n *     socket.onError( () => console.log(\"there was an error with the connection!\") )\n *     socket.onClose( () => console.log(\"the connection dropped\") )\n * ```\n *\n *\n * ## Channel Hooks\n *\n * For each joined channel, you can bind to `onError` and `onClose` events\n * to monitor the channel lifecycle, ie:\n *\n * ```javascript\n *     channel.onError( () => console.log(\"there was an error!\") )\n *     channel.onClose( () => console.log(\"the channel has gone away gracefully\") )\n * ```\n *\n * ### onError hooks\n *\n * `onError` hooks are invoked if the socket connection drops, or the channel\n * crashes on the server. In either case, a channel rejoin is attempted\n * automatically in an exponential backoff manner.\n *\n * ### onClose hooks\n *\n * `onClose` hooks are invoked only in two cases. 1) the channel explicitly\n * closed on the server, or 2). The client explicitly closed, by calling\n * `channel.leave()`\n *\n *\n * ## Presence\n *\n * The `Presence` object provides features for syncing presence information\n * from the server with the client and handling presences joining and leaving.\n *\n * ### Syncing initial state from the server\n *\n * `Presence.syncState` is used to sync the list of presences on the server\n * with the client's state. An optional `onJoin` and `onLeave` callback can\n * be provided to react to changes in the client's local presences across\n * disconnects and reconnects with the server.\n *\n * `Presence.syncDiff` is used to sync a diff of presence join and leave\n * events from the server, as they happen. Like `syncState`, `syncDiff`\n * accepts optional `onJoin` and `onLeave` callbacks to react to a user\n * joining or leaving from a device.\n *\n * ### Listing Presences\n *\n * `Presence.list` is used to return a list of presence information\n * based on the local state of metadata. By default, all presence\n * metadata is returned, but a `listBy` function can be supplied to\n * allow the client to select which metadata to use for a given presence.\n * For example, you may have a user online from different devices with\n * a metadata status of \"online\", but they have set themselves to \"away\"\n * on another device. In this case, the app may choose to use the \"away\"\n * status for what appears on the UI. The example below defines a `listBy`\n * function which prioritizes the first metadata which was registered for\n * each user. This could be the first tab they opened, or the first device\n * they came online from:\n *\n * ```javascript\n *     let state = {}\n *     state = Presence.syncState(state, stateFromServer)\n *     let listBy = (id, {metas: [first, ...rest]}) => {\n *       first.count = rest.length + 1 // count of this user's presences\n *       first.id = id\n *       return first\n *     }\n *     let onlineUsers = Presence.list(state, listBy)\n * ```\n *\n *\n * ### Example Usage\n *```javascript\n *     // detect if user has joined for the 1st time or from another tab/device\n *     let onJoin = (id, current, newPres) => {\n *       if(!current){\n *         console.log(\"user has entered for the first time\", newPres)\n *       } else {\n *         console.log(\"user additional presence\", newPres)\n *       }\n *     }\n *     // detect if user has left from all tabs/devices, or is still present\n *     let onLeave = (id, current, leftPres) => {\n *       if(current.metas.length === 0){\n *         console.log(\"user has left from all devices\", leftPres)\n *       } else {\n *         console.log(\"user left from a device\", leftPres)\n *       }\n *     }\n *     let presences = {} // client's initial empty presence state\n *     // receive initial presence data from server, sent after join\n *     myChannel.on(\"presence_state\", state => {\n *       presences = Presence.syncState(presences, state, onJoin, onLeave)\n *       displayUsers(Presence.list(presences))\n *     })\n *     // receive \"presence_diff\" from server, containing join/leave events\n *     myChannel.on(\"presence_diff\", diff => {\n *       presences = Presence.syncDiff(presences, diff, onJoin, onLeave)\n *       this.setState({users: Presence.list(room.presences, listBy)})\n *     })\n * ```\n * @module phoenix\n */\n\nvar VSN = \"2.0.0\";\nvar SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };\nvar DEFAULT_TIMEOUT = 10000;\nvar WS_CLOSE_NORMAL = 1000;\nvar CHANNEL_STATES = {\n  closed: \"closed\",\n  errored: \"errored\",\n  joined: \"joined\",\n  joining: \"joining\",\n  leaving: \"leaving\"\n};\nvar CHANNEL_EVENTS = {\n  close: \"phx_close\",\n  error: \"phx_error\",\n  join: \"phx_join\",\n  reply: \"phx_reply\",\n  leave: \"phx_leave\"\n};\nvar CHANNEL_LIFECYCLE_EVENTS = [CHANNEL_EVENTS.close, CHANNEL_EVENTS.error, CHANNEL_EVENTS.join, CHANNEL_EVENTS.reply, CHANNEL_EVENTS.leave];\nvar TRANSPORTS = {\n  longpoll: \"longpoll\",\n  websocket: \"websocket\"\n};\n\n/**\n * Initializes the Push\n * @param {Channel} channel - The Channel\n * @param {string} event - The event, for example `\"phx_join\"`\n * @param {Object} payload - The payload, for example `{user_id: 123}`\n * @param {number} timeout - The push timeout in milliseconds\n */\n\nvar Push = function () {\n  function Push(channel, event, payload, timeout) {\n    _classCallCheck(this, Push);\n\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload || {};\n    this.receivedResp = null;\n    this.timeout = timeout;\n    this.timeoutTimer = null;\n    this.recHooks = [];\n    this.sent = false;\n  }\n\n  /**\n   *\n   * @param {number} timeout\n   */\n\n\n  _createClass(Push, [{\n    key: \"resend\",\n    value: function resend(timeout) {\n      this.timeout = timeout;\n      this.reset();\n      this.send();\n    }\n\n    /**\n     *\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      if (this.hasReceived(\"timeout\")) {\n        return;\n      }\n      this.startTimeout();\n      this.sent = true;\n      this.channel.socket.push({\n        topic: this.channel.topic,\n        event: this.event,\n        payload: this.payload,\n        ref: this.ref,\n        join_ref: this.channel.joinRef()\n      });\n    }\n\n    /**\n     *\n     * @param {*} status\n     * @param {*} callback\n     */\n\n  }, {\n    key: \"receive\",\n    value: function receive(status, callback) {\n      if (this.hasReceived(status)) {\n        callback(this.receivedResp.response);\n      }\n\n      this.recHooks.push({ status: status, callback: callback });\n      return this;\n    }\n\n    // private\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.cancelRefEvent();\n      this.ref = null;\n      this.refEvent = null;\n      this.receivedResp = null;\n      this.sent = false;\n    }\n  }, {\n    key: \"matchReceive\",\n    value: function matchReceive(_ref) {\n      var status = _ref.status,\n          response = _ref.response,\n          ref = _ref.ref;\n\n      this.recHooks.filter(function (h) {\n        return h.status === status;\n      }).forEach(function (h) {\n        return h.callback(response);\n      });\n    }\n  }, {\n    key: \"cancelRefEvent\",\n    value: function cancelRefEvent() {\n      if (!this.refEvent) {\n        return;\n      }\n      this.channel.off(this.refEvent);\n    }\n  }, {\n    key: \"cancelTimeout\",\n    value: function cancelTimeout() {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = null;\n    }\n  }, {\n    key: \"startTimeout\",\n    value: function startTimeout() {\n      var _this = this;\n\n      if (this.timeoutTimer) {\n        this.cancelTimeout();\n      }\n      this.ref = this.channel.socket.makeRef();\n      this.refEvent = this.channel.replyEventName(this.ref);\n\n      this.channel.on(this.refEvent, function (payload) {\n        _this.cancelRefEvent();\n        _this.cancelTimeout();\n        _this.receivedResp = payload;\n        _this.matchReceive(payload);\n      });\n\n      this.timeoutTimer = setTimeout(function () {\n        _this.trigger(\"timeout\", {});\n      }, this.timeout);\n    }\n  }, {\n    key: \"hasReceived\",\n    value: function hasReceived(status) {\n      return this.receivedResp && this.receivedResp.status === status;\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(status, response) {\n      this.channel.trigger(this.refEvent, { status: status, response: response });\n    }\n  }]);\n\n  return Push;\n}();\n\n/**\n *\n * @param {string} topic\n * @param {Object} params\n * @param {Socket} socket\n */\n\n\nvar Channel = exports.Channel = function () {\n  function Channel(topic, params, socket) {\n    var _this2 = this;\n\n    _classCallCheck(this, Channel);\n\n    this.state = CHANNEL_STATES.closed;\n    this.topic = topic;\n    this.params = params || {};\n    this.socket = socket;\n    this.bindings = [];\n    this.timeout = this.socket.timeout;\n    this.joinedOnce = false;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.pushBuffer = [];\n    this.rejoinTimer = new Timer(function () {\n      return _this2.rejoinUntilConnected();\n    }, this.socket.reconnectAfterMs);\n    this.joinPush.receive(\"ok\", function () {\n      _this2.state = CHANNEL_STATES.joined;\n      _this2.rejoinTimer.reset();\n      _this2.pushBuffer.forEach(function (pushEvent) {\n        return pushEvent.send();\n      });\n      _this2.pushBuffer = [];\n    });\n    this.onClose(function () {\n      _this2.rejoinTimer.reset();\n      _this2.socket.log(\"channel\", \"close \" + _this2.topic + \" \" + _this2.joinRef());\n      _this2.state = CHANNEL_STATES.closed;\n      _this2.socket.remove(_this2);\n    });\n    this.onError(function (reason) {\n      if (_this2.isLeaving() || _this2.isClosed()) {\n        return;\n      }\n      _this2.socket.log(\"channel\", \"error \" + _this2.topic, reason);\n      _this2.state = CHANNEL_STATES.errored;\n      _this2.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive(\"timeout\", function () {\n      if (!_this2.isJoining()) {\n        return;\n      }\n      _this2.socket.log(\"channel\", \"timeout \" + _this2.topic + \" (\" + _this2.joinRef() + \")\", _this2.joinPush.timeout);\n      var leavePush = new Push(_this2, CHANNEL_EVENTS.leave, {}, _this2.timeout);\n      leavePush.send();\n      _this2.state = CHANNEL_STATES.errored;\n      _this2.joinPush.reset();\n      _this2.rejoinTimer.scheduleTimeout();\n    });\n    this.on(CHANNEL_EVENTS.reply, function (payload, ref) {\n      _this2.trigger(_this2.replyEventName(ref), payload);\n    });\n  }\n\n  _createClass(Channel, [{\n    key: \"rejoinUntilConnected\",\n    value: function rejoinUntilConnected() {\n      this.rejoinTimer.scheduleTimeout();\n      if (this.socket.isConnected()) {\n        this.rejoin();\n      }\n    }\n  }, {\n    key: \"join\",\n    value: function join() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n      if (this.joinedOnce) {\n        throw \"tried to join multiple times. 'join' can only be called a single time per channel instance\";\n      } else {\n        this.joinedOnce = true;\n        this.rejoin(timeout);\n        return this.joinPush;\n      }\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this.on(CHANNEL_EVENTS.close, callback);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(callback) {\n      this.on(CHANNEL_EVENTS.error, function (reason) {\n        return callback(reason);\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      this.bindings.push({ event: event, callback: callback });\n    }\n  }, {\n    key: \"off\",\n    value: function off(event) {\n      this.bindings = this.bindings.filter(function (bind) {\n        return bind.event !== event;\n      });\n    }\n  }, {\n    key: \"canPush\",\n    value: function canPush() {\n      return this.socket.isConnected() && this.isJoined();\n    }\n  }, {\n    key: \"push\",\n    value: function push(event, payload) {\n      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n      if (!this.joinedOnce) {\n        throw \"tried to push '\" + event + \"' to '\" + this.topic + \"' before joining. Use channel.join() before pushing events\";\n      }\n      var pushEvent = new Push(this, event, payload, timeout);\n      if (this.canPush()) {\n        pushEvent.send();\n      } else {\n        pushEvent.startTimeout();\n        this.pushBuffer.push(pushEvent);\n      }\n\n      return pushEvent;\n    }\n\n    /** Leaves the channel\n     *\n     * Unsubscribes from server events, and\n     * instructs channel to terminate on server\n     *\n     * Triggers onClose() hooks\n     *\n     * To receive leave acknowledgements, use the a `receive`\n     * hook to bind to the server ack, ie:\n     *\n     * ```javascript\n     *     channel.leave().receive(\"ok\", () => alert(\"left!\") )\n     * ```\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      var _this3 = this;\n\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n      this.state = CHANNEL_STATES.leaving;\n      var onClose = function onClose() {\n        _this3.socket.log(\"channel\", \"leave \" + _this3.topic);\n        _this3.trigger(CHANNEL_EVENTS.close, \"leave\");\n      };\n      var leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive(\"ok\", function () {\n        return onClose();\n      }).receive(\"timeout\", function () {\n        return onClose();\n      });\n      leavePush.send();\n      if (!this.canPush()) {\n        leavePush.trigger(\"ok\", {});\n      }\n\n      return leavePush;\n    }\n\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling\n     * before dispatching to the channel callbacks.\n     *\n     * Must return the payload, modified or unmodified\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event, payload, ref) {\n      return payload;\n    }\n\n    // private\n\n  }, {\n    key: \"isMember\",\n    value: function isMember(topic, event, payload, joinRef) {\n      if (this.topic !== topic) {\n        return false;\n      }\n      var isLifecycleEvent = CHANNEL_LIFECYCLE_EVENTS.indexOf(event) >= 0;\n\n      if (joinRef && isLifecycleEvent && joinRef !== this.joinRef()) {\n        this.socket.log(\"channel\", \"dropping outdated message\", { topic: topic, event: event, payload: payload, joinRef: joinRef });\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"joinRef\",\n    value: function joinRef() {\n      return this.joinPush.ref;\n    }\n  }, {\n    key: \"sendJoin\",\n    value: function sendJoin(timeout) {\n      this.state = CHANNEL_STATES.joining;\n      this.joinPush.resend(timeout);\n    }\n  }, {\n    key: \"rejoin\",\n    value: function rejoin() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      if (this.isLeaving()) {\n        return;\n      }\n      this.sendJoin(timeout);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(event, payload, ref, joinRef) {\n      var _this4 = this;\n\n      var handledPayload = this.onMessage(event, payload, ref, joinRef);\n      if (payload && !handledPayload) {\n        throw \"channel onMessage callbacks must return the payload, modified or unmodified\";\n      }\n\n      this.bindings.filter(function (bind) {\n        return bind.event === event;\n      }).map(function (bind) {\n        return bind.callback(handledPayload, ref, joinRef || _this4.joinRef());\n      });\n    }\n  }, {\n    key: \"replyEventName\",\n    value: function replyEventName(ref) {\n      return \"chan_reply_\" + ref;\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this.state === CHANNEL_STATES.closed;\n    }\n  }, {\n    key: \"isErrored\",\n    value: function isErrored() {\n      return this.state === CHANNEL_STATES.errored;\n    }\n  }, {\n    key: \"isJoined\",\n    value: function isJoined() {\n      return this.state === CHANNEL_STATES.joined;\n    }\n  }, {\n    key: \"isJoining\",\n    value: function isJoining() {\n      return this.state === CHANNEL_STATES.joining;\n    }\n  }, {\n    key: \"isLeaving\",\n    value: function isLeaving() {\n      return this.state === CHANNEL_STATES.leaving;\n    }\n  }]);\n\n  return Channel;\n}();\n\nvar Serializer = {\n  encode: function encode(msg, callback) {\n    var payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];\n    return callback(JSON.stringify(payload));\n  },\n  decode: function decode(rawPayload, callback) {\n    var _JSON$parse = JSON.parse(rawPayload),\n        _JSON$parse2 = _slicedToArray(_JSON$parse, 5),\n        join_ref = _JSON$parse2[0],\n        ref = _JSON$parse2[1],\n        topic = _JSON$parse2[2],\n        event = _JSON$parse2[3],\n        payload = _JSON$parse2[4];\n\n    return callback({ join_ref: join_ref, ref: ref, topic: topic, event: event, payload: payload });\n  }\n};\n\n/** Initializes the Socket\n *\n *\n * For IE8 support use an ES5-shim (https://github.com/es-shims/es5-shim)\n *\n * @param {string} endPoint - The string WebSocket endpoint, ie, `\"ws://example.com/socket\"`,\n *                                               `\"wss://example.com\"`\n *                                               `\"/socket\"` (inherited host & protocol)\n * @param {Object} opts - Optional configuration\n * @param {string} opts.transport - The Websocket Transport, for example WebSocket or Phoenix.LongPoll.\n *\n * Defaults to WebSocket with automatic LongPoll fallback.\n * @param {Function} opts.encode - The function to encode outgoing messages.\n *\n * Defaults to JSON:\n *\n * ```javascript\n * (payload, callback) => callback(JSON.stringify(payload))\n * ```\n *\n * @param {Function} opts.decode - The function to decode incoming messages.\n *\n * Defaults to JSON:\n *\n * ```javascript\n * (payload, callback) => callback(JSON.parse(payload))\n * ```\n *\n * @param {number} opts.timeout - The default timeout in milliseconds to trigger push timeouts.\n *\n * Defaults `DEFAULT_TIMEOUT`\n * @param {number} opts.heartbeatIntervalMs - The millisec interval to send a heartbeat message\n * @param {number} opts.reconnectAfterMs - The optional function that returns the millsec reconnect interval.\n *\n * Defaults to stepped backoff of:\n *\n * ```javascript\n *  function(tries){\n *    return [1000, 5000, 10000][tries - 1] || 10000\n *  }\n * ```\n * @param {Function} opts.logger - The optional function for specialized logging, ie:\n * ```javascript\n * logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n * ```\n *\n * @param {number}  opts.longpollerTimeout - The maximum timeout of a long poll AJAX request.\n *\n * Defaults to 20s (double the server long poll timer).\n *\n * @param {Object}  opts.params - The optional params to pass when connecting\n *\n *\n*/\n\nvar Socket = exports.Socket = function () {\n  function Socket(endPoint) {\n    var _this5 = this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };\n    this.channels = [];\n    this.sendBuffer = [];\n    this.ref = 0;\n    this.timeout = opts.timeout || DEFAULT_TIMEOUT;\n    this.transport = opts.transport || window.WebSocket || LongPoll;\n    this.defaultEncoder = Serializer.encode;\n    this.defaultDecoder = Serializer.decode;\n    if (this.transport !== LongPoll) {\n      this.encode = opts.encode || this.defaultEncoder;\n      this.decode = opts.decode || this.defaultDecoder;\n    } else {\n      this.encode = this.defaultEncoder;\n      this.decode = this.defaultDecoder;\n    }\n    this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 30000;\n    this.reconnectAfterMs = opts.reconnectAfterMs || function (tries) {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.logger = opts.logger || function () {}; // noop\n    this.longpollerTimeout = opts.longpollerTimeout || 20000;\n    this.params = opts.params || {};\n    this.endPoint = endPoint + \"/\" + TRANSPORTS.websocket;\n    this.heartbeatTimer = null;\n    this.pendingHeartbeatRef = null;\n    this.reconnectTimer = new Timer(function () {\n      _this5.disconnect(function () {\n        return _this5.connect();\n      });\n    }, this.reconnectAfterMs);\n  }\n\n  _createClass(Socket, [{\n    key: \"protocol\",\n    value: function protocol() {\n      return location.protocol.match(/^https/) ? \"wss\" : \"ws\";\n    }\n  }, {\n    key: \"endPointURL\",\n    value: function endPointURL() {\n      var uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params), { vsn: VSN });\n      if (uri.charAt(0) !== \"/\") {\n        return uri;\n      }\n      if (uri.charAt(1) === \"/\") {\n        return this.protocol() + \":\" + uri;\n      }\n\n      return this.protocol() + \"://\" + location.host + uri;\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(callback, code, reason) {\n      if (this.conn) {\n        this.conn.onclose = function () {}; // noop\n        if (code) {\n          this.conn.close(code, reason || \"\");\n        } else {\n          this.conn.close();\n        }\n        this.conn = null;\n      }\n      callback && callback();\n    }\n\n    /**\n     *\n     * @param {Object} params - The params to send when connecting, for example `{user_id: userToken}`\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(params) {\n      var _this6 = this;\n\n      if (params) {\n        console && console.log(\"passing params to connect is deprecated. Instead pass :params to the Socket constructor\");\n        this.params = params;\n      }\n      if (this.conn) {\n        return;\n      }\n\n      this.conn = new this.transport(this.endPointURL());\n      this.conn.timeout = this.longpollerTimeout;\n      this.conn.onopen = function () {\n        return _this6.onConnOpen();\n      };\n      this.conn.onerror = function (error) {\n        return _this6.onConnError(error);\n      };\n      this.conn.onmessage = function (event) {\n        return _this6.onConnMessage(event);\n      };\n      this.conn.onclose = function (event) {\n        return _this6.onConnClose(event);\n      };\n    }\n\n    /**\n     * Logs the message. Override `this.logger` for specialized logging. noops by default\n     * @param {string} kind\n     * @param {string} msg\n     * @param {Object} data\n     */\n\n  }, {\n    key: \"log\",\n    value: function log(kind, msg, data) {\n      this.logger(kind, msg, data);\n    }\n\n    // Registers callbacks for connection state change events\n    //\n    // Examples\n    //\n    //    socket.onError(function(error){ alert(\"An error occurred\") })\n    //\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen(callback) {\n      this.stateChangeCallbacks.open.push(callback);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this.stateChangeCallbacks.close.push(callback);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(callback) {\n      this.stateChangeCallbacks.error.push(callback);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(callback) {\n      this.stateChangeCallbacks.message.push(callback);\n    }\n  }, {\n    key: \"onConnOpen\",\n    value: function onConnOpen() {\n      var _this7 = this;\n\n      this.log(\"transport\", \"connected to \" + this.endPointURL());\n      this.flushSendBuffer();\n      this.reconnectTimer.reset();\n      if (!this.conn.skipHeartbeat) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(function () {\n          return _this7.sendHeartbeat();\n        }, this.heartbeatIntervalMs);\n      }\n      this.stateChangeCallbacks.open.forEach(function (callback) {\n        return callback();\n      });\n    }\n  }, {\n    key: \"onConnClose\",\n    value: function onConnClose(event) {\n      this.log(\"transport\", \"close\", event);\n      this.triggerChanError();\n      clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.scheduleTimeout();\n      this.stateChangeCallbacks.close.forEach(function (callback) {\n        return callback(event);\n      });\n    }\n  }, {\n    key: \"onConnError\",\n    value: function onConnError(error) {\n      this.log(\"transport\", error);\n      this.triggerChanError();\n      this.stateChangeCallbacks.error.forEach(function (callback) {\n        return callback(error);\n      });\n    }\n  }, {\n    key: \"triggerChanError\",\n    value: function triggerChanError() {\n      this.channels.forEach(function (channel) {\n        return channel.trigger(CHANNEL_EVENTS.error);\n      });\n    }\n  }, {\n    key: \"connectionState\",\n    value: function connectionState() {\n      switch (this.conn && this.conn.readyState) {\n        case SOCKET_STATES.connecting:\n          return \"connecting\";\n        case SOCKET_STATES.open:\n          return \"open\";\n        case SOCKET_STATES.closing:\n          return \"closing\";\n        default:\n          return \"closed\";\n      }\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this.connectionState() === \"open\";\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(channel) {\n      this.channels = this.channels.filter(function (c) {\n        return c.joinRef() !== channel.joinRef();\n      });\n    }\n  }, {\n    key: \"channel\",\n    value: function channel(topic) {\n      var chanParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var chan = new Channel(topic, chanParams, this);\n      this.channels.push(chan);\n      return chan;\n    }\n  }, {\n    key: \"push\",\n    value: function push(data) {\n      var _this8 = this;\n\n      var topic = data.topic,\n          event = data.event,\n          payload = data.payload,\n          ref = data.ref,\n          join_ref = data.join_ref;\n\n      var callback = function callback() {\n        _this8.encode(data, function (result) {\n          _this8.conn.send(result);\n        });\n      };\n      this.log(\"push\", topic + \" \" + event + \" (\" + join_ref + \", \" + ref + \")\", payload);\n      if (this.isConnected()) {\n        callback();\n      } else {\n        this.sendBuffer.push(callback);\n      }\n    }\n\n    /**\n     * Return the next message ref, accounting for overflows\n     */\n\n  }, {\n    key: \"makeRef\",\n    value: function makeRef() {\n      var newRef = this.ref + 1;\n      if (newRef === this.ref) {\n        this.ref = 0;\n      } else {\n        this.ref = newRef;\n      }\n\n      return this.ref.toString();\n    }\n  }, {\n    key: \"sendHeartbeat\",\n    value: function sendHeartbeat() {\n      if (!this.isConnected()) {\n        return;\n      }\n      if (this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n        this.log(\"transport\", \"heartbeat timeout. Attempting to re-establish connection\");\n        this.conn.close(WS_CLOSE_NORMAL, \"hearbeat timeout\");\n        return;\n      }\n      this.pendingHeartbeatRef = this.makeRef();\n      this.push({ topic: \"phoenix\", event: \"heartbeat\", payload: {}, ref: this.pendingHeartbeatRef });\n    }\n  }, {\n    key: \"flushSendBuffer\",\n    value: function flushSendBuffer() {\n      if (this.isConnected() && this.sendBuffer.length > 0) {\n        this.sendBuffer.forEach(function (callback) {\n          return callback();\n        });\n        this.sendBuffer = [];\n      }\n    }\n  }, {\n    key: \"onConnMessage\",\n    value: function onConnMessage(rawMessage) {\n      var _this9 = this;\n\n      this.decode(rawMessage.data, function (msg) {\n        var topic = msg.topic,\n            event = msg.event,\n            payload = msg.payload,\n            ref = msg.ref,\n            join_ref = msg.join_ref;\n\n        if (ref && ref === _this9.pendingHeartbeatRef) {\n          _this9.pendingHeartbeatRef = null;\n        }\n\n        _this9.log(\"receive\", (payload.status || \"\") + \" \" + topic + \" \" + event + \" \" + (ref && \"(\" + ref + \")\" || \"\"), payload);\n        _this9.channels.filter(function (channel) {\n          return channel.isMember(topic, event, payload, join_ref);\n        }).forEach(function (channel) {\n          return channel.trigger(event, payload, ref, join_ref);\n        });\n        _this9.stateChangeCallbacks.message.forEach(function (callback) {\n          return callback(msg);\n        });\n      });\n    }\n  }]);\n\n  return Socket;\n}();\n\nvar LongPoll = exports.LongPoll = function () {\n  function LongPoll(endPoint) {\n    _classCallCheck(this, LongPoll);\n\n    this.endPoint = null;\n    this.token = null;\n    this.skipHeartbeat = true;\n    this.onopen = function () {}; // noop\n    this.onerror = function () {}; // noop\n    this.onmessage = function () {}; // noop\n    this.onclose = function () {}; // noop\n    this.pollEndpoint = this.normalizeEndpoint(endPoint);\n    this.readyState = SOCKET_STATES.connecting;\n\n    this.poll();\n  }\n\n  _createClass(LongPoll, [{\n    key: \"normalizeEndpoint\",\n    value: function normalizeEndpoint(endPoint) {\n      return endPoint.replace(\"ws://\", \"http://\").replace(\"wss://\", \"https://\").replace(new RegExp(\"(.*)\\/\" + TRANSPORTS.websocket), \"$1/\" + TRANSPORTS.longpoll);\n    }\n  }, {\n    key: \"endpointURL\",\n    value: function endpointURL() {\n      return Ajax.appendParams(this.pollEndpoint, { token: this.token });\n    }\n  }, {\n    key: \"closeAndRetry\",\n    value: function closeAndRetry() {\n      this.close();\n      this.readyState = SOCKET_STATES.connecting;\n    }\n  }, {\n    key: \"ontimeout\",\n    value: function ontimeout() {\n      this.onerror(\"timeout\");\n      this.closeAndRetry();\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var _this10 = this;\n\n      if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {\n        return;\n      }\n\n      Ajax.request(\"GET\", this.endpointURL(), \"application/json\", null, this.timeout, this.ontimeout.bind(this), function (resp) {\n        if (resp) {\n          var status = resp.status,\n              token = resp.token,\n              messages = resp.messages;\n\n          _this10.token = token;\n        } else {\n          var status = 0;\n        }\n\n        switch (status) {\n          case 200:\n            messages.forEach(function (msg) {\n              return _this10.onmessage({ data: msg });\n            });\n            _this10.poll();\n            break;\n          case 204:\n            _this10.poll();\n            break;\n          case 410:\n            _this10.readyState = SOCKET_STATES.open;\n            _this10.onopen();\n            _this10.poll();\n            break;\n          case 0:\n          case 500:\n            _this10.onerror();\n            _this10.closeAndRetry();\n            break;\n          default:\n            throw \"unhandled poll status \" + status;\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(body) {\n      var _this11 = this;\n\n      Ajax.request(\"POST\", this.endpointURL(), \"application/json\", body, this.timeout, this.onerror.bind(this, \"timeout\"), function (resp) {\n        if (!resp || resp.status !== 200) {\n          _this11.onerror(resp && resp.status);\n          _this11.closeAndRetry();\n        }\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.readyState = SOCKET_STATES.closed;\n      this.onclose();\n    }\n  }]);\n\n  return LongPoll;\n}();\n\nvar Ajax = exports.Ajax = function () {\n  function Ajax() {\n    _classCallCheck(this, Ajax);\n  }\n\n  _createClass(Ajax, null, [{\n    key: \"request\",\n    value: function request(method, endPoint, accept, body, timeout, ontimeout, callback) {\n      if (window.XDomainRequest) {\n        var req = new XDomainRequest(); // IE8, IE9\n        this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);\n      } else {\n        var _req = window.XMLHttpRequest ? new window.XMLHttpRequest() : // IE7+, Firefox, Chrome, Opera, Safari\n        new ActiveXObject(\"Microsoft.XMLHTTP\"); // IE6, IE5\n        this.xhrRequest(_req, method, endPoint, accept, body, timeout, ontimeout, callback);\n      }\n    }\n  }, {\n    key: \"xdomainRequest\",\n    value: function xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {\n      var _this12 = this;\n\n      req.timeout = timeout;\n      req.open(method, endPoint);\n      req.onload = function () {\n        var response = _this12.parseJSON(req.responseText);\n        callback && callback(response);\n      };\n      if (ontimeout) {\n        req.ontimeout = ontimeout;\n      }\n\n      // Work around bug in IE9 that requires an attached onprogress handler\n      req.onprogress = function () {};\n\n      req.send(body);\n    }\n  }, {\n    key: \"xhrRequest\",\n    value: function xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {\n      var _this13 = this;\n\n      req.open(method, endPoint, true);\n      req.timeout = timeout;\n      req.setRequestHeader(\"Content-Type\", accept);\n      req.onerror = function () {\n        callback && callback(null);\n      };\n      req.onreadystatechange = function () {\n        if (req.readyState === _this13.states.complete && callback) {\n          var response = _this13.parseJSON(req.responseText);\n          callback(response);\n        }\n      };\n      if (ontimeout) {\n        req.ontimeout = ontimeout;\n      }\n\n      req.send(body);\n    }\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(resp) {\n      if (!resp || resp === \"\") {\n        return null;\n      }\n\n      try {\n        return JSON.parse(resp);\n      } catch (e) {\n        console && console.log(\"failed to parse JSON response\", resp);\n        return null;\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(obj, parentKey) {\n      var queryStr = [];\n      for (var key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n          continue;\n        }\n        var paramKey = parentKey ? parentKey + \"[\" + key + \"]\" : key;\n        var paramVal = obj[key];\n        if ((typeof paramVal === \"undefined\" ? \"undefined\" : _typeof(paramVal)) === \"object\") {\n          queryStr.push(this.serialize(paramVal, paramKey));\n        } else {\n          queryStr.push(encodeURIComponent(paramKey) + \"=\" + encodeURIComponent(paramVal));\n        }\n      }\n      return queryStr.join(\"&\");\n    }\n  }, {\n    key: \"appendParams\",\n    value: function appendParams(url, params) {\n      if (Object.keys(params).length === 0) {\n        return url;\n      }\n\n      var prefix = url.match(/\\?/) ? \"&\" : \"?\";\n      return \"\" + url + prefix + this.serialize(params);\n    }\n  }]);\n\n  return Ajax;\n}();\n\nAjax.states = { complete: 4 };\n\nvar Presence = exports.Presence = {\n  syncState: function syncState(currentState, newState, onJoin, onLeave) {\n    var _this14 = this;\n\n    var state = this.clone(currentState);\n    var joins = {};\n    var leaves = {};\n\n    this.map(state, function (key, presence) {\n      if (!newState[key]) {\n        leaves[key] = presence;\n      }\n    });\n    this.map(newState, function (key, newPresence) {\n      var currentPresence = state[key];\n      if (currentPresence) {\n        var newRefs = newPresence.metas.map(function (m) {\n          return m.phx_ref;\n        });\n        var curRefs = currentPresence.metas.map(function (m) {\n          return m.phx_ref;\n        });\n        var joinedMetas = newPresence.metas.filter(function (m) {\n          return curRefs.indexOf(m.phx_ref) < 0;\n        });\n        var leftMetas = currentPresence.metas.filter(function (m) {\n          return newRefs.indexOf(m.phx_ref) < 0;\n        });\n        if (joinedMetas.length > 0) {\n          joins[key] = newPresence;\n          joins[key].metas = joinedMetas;\n        }\n        if (leftMetas.length > 0) {\n          leaves[key] = _this14.clone(currentPresence);\n          leaves[key].metas = leftMetas;\n        }\n      } else {\n        joins[key] = newPresence;\n      }\n    });\n    return this.syncDiff(state, { joins: joins, leaves: leaves }, onJoin, onLeave);\n  },\n  syncDiff: function syncDiff(currentState, _ref2, onJoin, onLeave) {\n    var joins = _ref2.joins,\n        leaves = _ref2.leaves;\n\n    var state = this.clone(currentState);\n    if (!onJoin) {\n      onJoin = function onJoin() {};\n    }\n    if (!onLeave) {\n      onLeave = function onLeave() {};\n    }\n\n    this.map(joins, function (key, newPresence) {\n      var currentPresence = state[key];\n      state[key] = newPresence;\n      if (currentPresence) {\n        var _state$key$metas;\n\n        (_state$key$metas = state[key].metas).unshift.apply(_state$key$metas, _toConsumableArray(currentPresence.metas));\n      }\n      onJoin(key, currentPresence, newPresence);\n    });\n    this.map(leaves, function (key, leftPresence) {\n      var currentPresence = state[key];\n      if (!currentPresence) {\n        return;\n      }\n      var refsToRemove = leftPresence.metas.map(function (m) {\n        return m.phx_ref;\n      });\n      currentPresence.metas = currentPresence.metas.filter(function (p) {\n        return refsToRemove.indexOf(p.phx_ref) < 0;\n      });\n      onLeave(key, currentPresence, leftPresence);\n      if (currentPresence.metas.length === 0) {\n        delete state[key];\n      }\n    });\n    return state;\n  },\n  list: function list(presences, chooser) {\n    if (!chooser) {\n      chooser = function chooser(key, pres) {\n        return pres;\n      };\n    }\n\n    return this.map(presences, function (key, presence) {\n      return chooser(key, presence);\n    });\n  },\n\n\n  // private\n\n  map: function map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(function (key) {\n      return func(key, obj[key]);\n    });\n  },\n  clone: function clone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n};\n\n/**\n *\n * Creates a timer that accepts a `timerCalc` function to perform\n * calculated timeout retries, such as exponential backoff.\n *\n * ## Examples\n *\n * ```javascript\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n * ```\n * @param {Function} callback\n * @param {Function} timerCalc\n */\n\nvar Timer = function () {\n  function Timer(callback, timerCalc) {\n    _classCallCheck(this, Timer);\n\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = null;\n    this.tries = 0;\n  }\n\n  _createClass(Timer, [{\n    key: \"reset\",\n    value: function reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    }\n\n    /**\n     * Cancels any previous scheduleTimeout and schedules callback\n     */\n\n  }, {\n    key: \"scheduleTimeout\",\n    value: function scheduleTimeout() {\n      var _this15 = this;\n\n      clearTimeout(this.timer);\n\n      this.timer = setTimeout(function () {\n        _this15.tries = _this15.tries + 1;\n        _this15.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n  }]);\n\n  return Timer;\n}();\n\n})));\n","import AppInterface from \"./app_interface\";\nimport { Socket } from \"phoenix\";\nimport { Channel } from \"phoenix\";\n\ndeclare global {\n  interface Window {\n    appInterface: AppInterface;\n  }\n}\n\nconst socket = new Socket(\"/socket\", {});\nsocket.connect();\n\nexport const getSocket = () => {\n  return socket;\n};\n\nexport const channelJoin = (topic: string, channel: Channel) => {\n  channel\n    .join()\n    .receive(\"ok\", messages => {\n      // tslint:disable-next-line:no-console\n      console.log(`Joining topic: ${topic}`, messages);\n    })\n    .receive(\"error\", ({ reason }) => {\n      // tslint:disable-next-line:no-console\n      console.log(\"failed join\", reason);\n    })\n    .receive(\"timeout\", () => {\n      // tslint:disable-next-line:no-console\n      console.log(\"Networking issue. Still waiting...\");\n    });\n};\n\nexport interface ChannelMessage {\n  topic: string;\n  // tslint:disable-next-line:no-any\n  params?: any;\n  // tslint:disable-next-line:no-any\n  ok: (msg: any) => void;\n  // tslint:disable-next-line:no-any\n  error?: (reason: any) => void;\n}\n\nexport const sendChannelMsg = (\n  channelName: string,\n  channel: Channel,\n  { topic, ok, error, params }: ChannelMessage\n) => {\n  channel\n    .push(topic, params || {})\n    .receive(\"ok\", ok)\n    .receive(\"error\", reasons => {\n      if (error) {\n        error(reasons);\n      } else {\n        // tslint:disable-next-line:no-console\n        console.log(`Error on push to ${channelName}:${topic}`, reasons);\n      }\n    })\n    .receive(\"timeout\", () => {\n      // tslint:disable-next-line:no-console\n      console.log(\"Networking issue...\");\n    });\n};\n\n// tslint:disable-next-line:only-arrow-functions\n(function() {\n  const sidebarAction = (sidebar: HTMLElement) => {\n    const containerEl = document.getElementById(\"app-container\");\n    const sidebarTriggerEl = document.getElementById(\"sidebar-trigger\");\n\n    if (containerEl && sidebarTriggerEl) {\n      containerEl.addEventListener(\n        \"click\",\n        evt => {\n          evt.stopPropagation();\n          sidebar.classList.remove(\"visible\");\n        },\n        false\n      );\n\n      containerEl.addEventListener(\n        \"touchstart\",\n        evt => {\n          evt.stopPropagation();\n          sidebar.classList.remove(\"visible\");\n        },\n        false\n      );\n\n      sidebarTriggerEl.addEventListener(\n        \"click\",\n        evt => {\n          evt.preventDefault();\n          evt.stopPropagation();\n          sidebar.classList[\n            sidebar.classList.contains(\"visible\") ? \"remove\" : \"add\"\n          ](\"visible\");\n        },\n        false\n      );\n    }\n  };\n\n  const sidebarEl = document.getElementById(\"app-sidebar\");\n\n  if (sidebarEl) {\n    sidebarAction(sidebarEl);\n  }\n})();\n"],"sourceRoot":""}