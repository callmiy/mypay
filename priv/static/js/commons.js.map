{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app.ts","webpack:///./node_modules/phoenix/priv/static/phoenix.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","socket","phoenix__WEBPACK_IMPORTED_MODULE_0__","connect","getSocket","channelJoin","topic","channel","join","receive","messages","console","log","_a","reason","sendChannelMsg","channelName","ok","error","params","push","reasons","docReady","fn","document","addEventListener","sidebarEl","getElementById","sidebar","containerEl","sidebarTriggerEl","evt","stopPropagation","classList","remove","preventDefault","contains","sidebarAction","_typeof","iterator","obj","constructor","_slicedToArray","arr","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","length","err","sliceIterator","TypeError","_createClass","defineProperties","target","props","descriptor","configurable","writable","Constructor","protoProps","staticProps","_classCallCheck","instance","SOCKET_STATES","connecting","open","closing","closed","DEFAULT_TIMEOUT","CHANNEL_STATES","errored","joined","joining","leaving","CHANNEL_EVENTS","close","reply","leave","CHANNEL_LIFECYCLE_EVENTS","TRANSPORTS","longpoll","websocket","Push","event","payload","timeout","this","receivedResp","timeoutTimer","recHooks","sent","reset","send","hasReceived","startTimeout","ref","join_ref","joinRef","status","callback","response","cancelRefEvent","refEvent","_ref","filter","h","forEach","off","clearTimeout","_this","cancelTimeout","makeRef","replyEventName","on","matchReceive","setTimeout","trigger","Channel","_this2","state","bindings","joinedOnce","joinPush","pushBuffer","rejoinTimer","Timer","rejoinUntilConnected","reconnectAfterMs","pushEvent","onClose","onError","isLeaving","isClosed","scheduleTimeout","isJoining","leavePush","isConnected","rejoin","arguments","isJoined","canPush","_this3","isLifecycleEvent","indexOf","resend","sendJoin","_this4","handledPayload","onMessage","map","Serializer","encode","msg","JSON","stringify","decode","rawPayload","_JSON$parse","parse","_JSON$parse2","LongPoll","Socket","endPoint","_this5","opts","stateChangeCallbacks","message","channels","sendBuffer","transport","window","WebSocket","defaultEncoder","defaultDecoder","heartbeatIntervalMs","tries","logger","longpollerTimeout","heartbeatTimer","pendingHeartbeatRef","reconnectTimer","disconnect","location","protocol","match","uri","Ajax","appendParams","vsn","charAt","host","code","conn","onclose","_this6","endPointURL","onopen","onConnOpen","onerror","onConnError","onmessage","onConnMessage","onConnClose","kind","data","_this7","flushSendBuffer","skipHeartbeat","clearInterval","setInterval","sendHeartbeat","triggerChanError","readyState","connectionState","chanParams","chan","_this8","result","newRef","toString","rawMessage","_this9","isMember","token","pollEndpoint","normalizeEndpoint","poll","replace","RegExp","closeAndRetry","_this10","request","endpointURL","ontimeout","resp","body","_this11","method","accept","XDomainRequest","req","xdomainRequest","_req","XMLHttpRequest","ActiveXObject","xhrRequest","_this12","onload","parseJSON","responseText","onprogress","_this13","setRequestHeader","onreadystatechange","states","complete","e","parentKey","queryStr","paramKey","paramVal","serialize","encodeURIComponent","url","keys","prefix","Presence","syncState","currentState","newState","onJoin","onLeave","_this14","clone","joins","leaves","presence","newPresence","currentPresence","newRefs","metas","phx_ref","curRefs","joinedMetas","leftMetas","syncDiff","_ref2","_state$key$metas","unshift","apply","arr2","from","_toConsumableArray","leftPresence","refsToRemove","list","presences","chooser","pres","func","getOwnPropertyNames","timerCalc","timer","_this15","factory"],"mappings":"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","file":"js/commons.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","import AppInterface from \"./app_interface\";\nimport { Socket } from \"phoenix\";\nimport { Channel } from \"phoenix\";\n\ndeclare global {\n  interface Window {\n    appInterface: AppInterface;\n  }\n}\n\nconst socket = new Socket(\"/socket\", {});\nsocket.connect();\n\nexport const getSocket = () => {\n  return socket;\n};\n\nexport const channelJoin = (topic: string, channel: Channel) => {\n  channel\n    .join()\n    .receive(\"ok\", messages => {\n      // tslint:disable-next-line:no-console\n      console.log(`Joining topic: ${topic}`, messages);\n    })\n    .receive(\"error\", ({ reason }) => {\n      // tslint:disable-next-line:no-console\n      console.log(\"failed join\", reason);\n    })\n    .receive(\"timeout\", () => {\n      // tslint:disable-next-line:no-console\n      console.log(\"Networking issue. Still waiting...\");\n    });\n};\n\nexport interface ChannelMessage {\n  topic: string;\n  // tslint:disable-next-line:no-any\n  params?: any;\n  // tslint:disable-next-line:no-any\n  ok: (msg: any) => void;\n  // tslint:disable-next-line:no-any\n  error?: (reason: any) => void;\n}\n\nexport const sendChannelMsg = (\n  channelName: string,\n  channel: Channel,\n  { topic, ok, error, params }: ChannelMessage\n) => {\n  channel\n    .push(topic, params || {})\n    .receive(\"ok\", ok)\n    .receive(\"error\", reasons => {\n      if (error) {\n        error(reasons);\n      } else {\n        // tslint:disable-next-line:no-console\n        console.log(`Error on push to ${channelName}:${topic}`, reasons);\n      }\n    })\n    .receive(\"timeout\", () => {\n      // tslint:disable-next-line:no-console\n      console.log(\"Networking issue...\");\n    });\n};\n\nexport const docReady = (fn: () => void) =>\n  document.addEventListener(\"DOMContentLoaded\", fn);\n\nconst processSidebar = () => {\n  const sidebarAction = (sidebar: HTMLElement) => {\n    const containerEl = document.getElementById(\"app-container\");\n    const sidebarTriggerEl = document.getElementById(\"sidebar-trigger\");\n\n    if (containerEl && sidebarTriggerEl) {\n      containerEl.addEventListener(\n        \"click\",\n        evt => {\n          evt.stopPropagation();\n          sidebar.classList.remove(\"visible\");\n        },\n        false\n      );\n\n      containerEl.addEventListener(\n        \"touchstart\",\n        evt => {\n          evt.stopPropagation();\n          sidebar.classList.remove(\"visible\");\n        },\n        false\n      );\n\n      sidebarTriggerEl.addEventListener(\n        \"click\",\n        evt => {\n          evt.preventDefault();\n          evt.stopPropagation();\n          sidebar.classList[\n            sidebar.classList.contains(\"visible\") ? \"remove\" : \"add\"\n          ](\"visible\");\n        },\n        false\n      );\n    }\n  };\n\n  const sidebarEl = document.getElementById(\"app-sidebar\");\n\n  if (sidebarEl) {\n    sidebarAction(sidebarEl);\n  }\n};\n\ndocReady(processSidebar);\n","(function (global, factory) {\ntypeof exports === 'object' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\nfactory(global.Phoenix = global.Phoenix || {});\n}(this, (function (exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Phoenix Channels JavaScript client\n *\n * ## Socket Connection\n *\n * A single connection is established to the server and\n * channels are multiplexed over the connection.\n * Connect to the server using the `Socket` class:\n *\n * ```javascript\n *     let socket = new Socket(\"/socket\", {params: {userToken: \"123\"}})\n *     socket.connect()\n * ```\n *\n * The `Socket` constructor takes the mount point of the socket,\n * the authentication params, as well as options that can be found in\n * the Socket docs, such as configuring the `LongPoll` transport, and\n * heartbeat.\n *\n * ## Channels\n *\n * Channels are isolated, concurrent processes on the server that\n * subscribe to topics and broker events between the client and server.\n * To join a channel, you must provide the topic, and channel params for\n * authorization. Here's an example chat room example where `\"new_msg\"`\n * events are listened for, messages are pushed to the server, and\n * the channel is joined with ok/error/timeout matches:\n *\n * ```javascript\n *     let channel = socket.channel(\"room:123\", {token: roomToken})\n *     channel.on(\"new_msg\", msg => console.log(\"Got message\", msg) )\n *     $input.onEnter( e => {\n *       channel.push(\"new_msg\", {body: e.target.val}, 10000)\n *        .receive(\"ok\", (msg) => console.log(\"created message\", msg) )\n *        .receive(\"error\", (reasons) => console.log(\"create failed\", reasons) )\n *        .receive(\"timeout\", () => console.log(\"Networking issue...\") )\n *     })\n *     channel.join()\n *       .receive(\"ok\", ({messages}) => console.log(\"catching up\", messages) )\n *       .receive(\"error\", ({reason}) => console.log(\"failed join\", reason) )\n *       .receive(\"timeout\", () => console.log(\"Networking issue. Still waiting...\") )\n *```\n *\n * ## Joining\n *\n * Creating a channel with `socket.channel(topic, params)`, binds the params to\n * `channel.params`, which are sent up on `channel.join()`.\n * Subsequent rejoins will send up the modified params for\n * updating authorization params, or passing up last_message_id information.\n * Successful joins receive an \"ok\" status, while unsuccessful joins\n * receive \"error\".\n *\n * ## Duplicate Join Subscriptions\n *\n * While the client may join any number of topics on any number of channels,\n * the client may only hold a single subscription for each unique topic at any\n * given time. When attempting to create a duplicate subscription,\n * the server will close the existing channel, log a warning, and\n * spawn a new channel for the topic. The client will have their\n * `channel.onClose` callbacks fired for the existing channel, and the new\n * channel join will have its receive hooks processed as normal.\n *\n * ## Pushing Messages\n *\n * From the previous example, we can see that pushing messages to the server\n * can be done with `channel.push(eventName, payload)` and we can optionally\n * receive responses from the push. Additionally, we can use\n * `receive(\"timeout\", callback)` to abort waiting for our other `receive` hooks\n *  and take action after some period of waiting. The default timeout is 5000ms.\n *\n *\n * ## Socket Hooks\n *\n * Lifecycle events of the multiplexed connection can be hooked into via\n * `socket.onError()` and `socket.onClose()` events, ie:\n *\n * ```javascript\n *     socket.onError( () => console.log(\"there was an error with the connection!\") )\n *     socket.onClose( () => console.log(\"the connection dropped\") )\n * ```\n *\n *\n * ## Channel Hooks\n *\n * For each joined channel, you can bind to `onError` and `onClose` events\n * to monitor the channel lifecycle, ie:\n *\n * ```javascript\n *     channel.onError( () => console.log(\"there was an error!\") )\n *     channel.onClose( () => console.log(\"the channel has gone away gracefully\") )\n * ```\n *\n * ### onError hooks\n *\n * `onError` hooks are invoked if the socket connection drops, or the channel\n * crashes on the server. In either case, a channel rejoin is attempted\n * automatically in an exponential backoff manner.\n *\n * ### onClose hooks\n *\n * `onClose` hooks are invoked only in two cases. 1) the channel explicitly\n * closed on the server, or 2). The client explicitly closed, by calling\n * `channel.leave()`\n *\n *\n * ## Presence\n *\n * The `Presence` object provides features for syncing presence information\n * from the server with the client and handling presences joining and leaving.\n *\n * ### Syncing initial state from the server\n *\n * `Presence.syncState` is used to sync the list of presences on the server\n * with the client's state. An optional `onJoin` and `onLeave` callback can\n * be provided to react to changes in the client's local presences across\n * disconnects and reconnects with the server.\n *\n * `Presence.syncDiff` is used to sync a diff of presence join and leave\n * events from the server, as they happen. Like `syncState`, `syncDiff`\n * accepts optional `onJoin` and `onLeave` callbacks to react to a user\n * joining or leaving from a device.\n *\n * ### Listing Presences\n *\n * `Presence.list` is used to return a list of presence information\n * based on the local state of metadata. By default, all presence\n * metadata is returned, but a `listBy` function can be supplied to\n * allow the client to select which metadata to use for a given presence.\n * For example, you may have a user online from different devices with\n * a metadata status of \"online\", but they have set themselves to \"away\"\n * on another device. In this case, the app may choose to use the \"away\"\n * status for what appears on the UI. The example below defines a `listBy`\n * function which prioritizes the first metadata which was registered for\n * each user. This could be the first tab they opened, or the first device\n * they came online from:\n *\n * ```javascript\n *     let state = {}\n *     state = Presence.syncState(state, stateFromServer)\n *     let listBy = (id, {metas: [first, ...rest]}) => {\n *       first.count = rest.length + 1 // count of this user's presences\n *       first.id = id\n *       return first\n *     }\n *     let onlineUsers = Presence.list(state, listBy)\n * ```\n *\n *\n * ### Example Usage\n *```javascript\n *     // detect if user has joined for the 1st time or from another tab/device\n *     let onJoin = (id, current, newPres) => {\n *       if(!current){\n *         console.log(\"user has entered for the first time\", newPres)\n *       } else {\n *         console.log(\"user additional presence\", newPres)\n *       }\n *     }\n *     // detect if user has left from all tabs/devices, or is still present\n *     let onLeave = (id, current, leftPres) => {\n *       if(current.metas.length === 0){\n *         console.log(\"user has left from all devices\", leftPres)\n *       } else {\n *         console.log(\"user left from a device\", leftPres)\n *       }\n *     }\n *     let presences = {} // client's initial empty presence state\n *     // receive initial presence data from server, sent after join\n *     myChannel.on(\"presence_state\", state => {\n *       presences = Presence.syncState(presences, state, onJoin, onLeave)\n *       displayUsers(Presence.list(presences))\n *     })\n *     // receive \"presence_diff\" from server, containing join/leave events\n *     myChannel.on(\"presence_diff\", diff => {\n *       presences = Presence.syncDiff(presences, diff, onJoin, onLeave)\n *       this.setState({users: Presence.list(room.presences, listBy)})\n *     })\n * ```\n * @module phoenix\n */\n\nvar VSN = \"2.0.0\";\nvar SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };\nvar DEFAULT_TIMEOUT = 10000;\nvar WS_CLOSE_NORMAL = 1000;\nvar CHANNEL_STATES = {\n  closed: \"closed\",\n  errored: \"errored\",\n  joined: \"joined\",\n  joining: \"joining\",\n  leaving: \"leaving\"\n};\nvar CHANNEL_EVENTS = {\n  close: \"phx_close\",\n  error: \"phx_error\",\n  join: \"phx_join\",\n  reply: \"phx_reply\",\n  leave: \"phx_leave\"\n};\nvar CHANNEL_LIFECYCLE_EVENTS = [CHANNEL_EVENTS.close, CHANNEL_EVENTS.error, CHANNEL_EVENTS.join, CHANNEL_EVENTS.reply, CHANNEL_EVENTS.leave];\nvar TRANSPORTS = {\n  longpoll: \"longpoll\",\n  websocket: \"websocket\"\n};\n\n/**\n * Initializes the Push\n * @param {Channel} channel - The Channel\n * @param {string} event - The event, for example `\"phx_join\"`\n * @param {Object} payload - The payload, for example `{user_id: 123}`\n * @param {number} timeout - The push timeout in milliseconds\n */\n\nvar Push = function () {\n  function Push(channel, event, payload, timeout) {\n    _classCallCheck(this, Push);\n\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload || {};\n    this.receivedResp = null;\n    this.timeout = timeout;\n    this.timeoutTimer = null;\n    this.recHooks = [];\n    this.sent = false;\n  }\n\n  /**\n   *\n   * @param {number} timeout\n   */\n\n\n  _createClass(Push, [{\n    key: \"resend\",\n    value: function resend(timeout) {\n      this.timeout = timeout;\n      this.reset();\n      this.send();\n    }\n\n    /**\n     *\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      if (this.hasReceived(\"timeout\")) {\n        return;\n      }\n      this.startTimeout();\n      this.sent = true;\n      this.channel.socket.push({\n        topic: this.channel.topic,\n        event: this.event,\n        payload: this.payload,\n        ref: this.ref,\n        join_ref: this.channel.joinRef()\n      });\n    }\n\n    /**\n     *\n     * @param {*} status\n     * @param {*} callback\n     */\n\n  }, {\n    key: \"receive\",\n    value: function receive(status, callback) {\n      if (this.hasReceived(status)) {\n        callback(this.receivedResp.response);\n      }\n\n      this.recHooks.push({ status: status, callback: callback });\n      return this;\n    }\n\n    // private\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.cancelRefEvent();\n      this.ref = null;\n      this.refEvent = null;\n      this.receivedResp = null;\n      this.sent = false;\n    }\n  }, {\n    key: \"matchReceive\",\n    value: function matchReceive(_ref) {\n      var status = _ref.status,\n          response = _ref.response,\n          ref = _ref.ref;\n\n      this.recHooks.filter(function (h) {\n        return h.status === status;\n      }).forEach(function (h) {\n        return h.callback(response);\n      });\n    }\n  }, {\n    key: \"cancelRefEvent\",\n    value: function cancelRefEvent() {\n      if (!this.refEvent) {\n        return;\n      }\n      this.channel.off(this.refEvent);\n    }\n  }, {\n    key: \"cancelTimeout\",\n    value: function cancelTimeout() {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = null;\n    }\n  }, {\n    key: \"startTimeout\",\n    value: function startTimeout() {\n      var _this = this;\n\n      if (this.timeoutTimer) {\n        this.cancelTimeout();\n      }\n      this.ref = this.channel.socket.makeRef();\n      this.refEvent = this.channel.replyEventName(this.ref);\n\n      this.channel.on(this.refEvent, function (payload) {\n        _this.cancelRefEvent();\n        _this.cancelTimeout();\n        _this.receivedResp = payload;\n        _this.matchReceive(payload);\n      });\n\n      this.timeoutTimer = setTimeout(function () {\n        _this.trigger(\"timeout\", {});\n      }, this.timeout);\n    }\n  }, {\n    key: \"hasReceived\",\n    value: function hasReceived(status) {\n      return this.receivedResp && this.receivedResp.status === status;\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(status, response) {\n      this.channel.trigger(this.refEvent, { status: status, response: response });\n    }\n  }]);\n\n  return Push;\n}();\n\n/**\n *\n * @param {string} topic\n * @param {Object} params\n * @param {Socket} socket\n */\n\n\nvar Channel = exports.Channel = function () {\n  function Channel(topic, params, socket) {\n    var _this2 = this;\n\n    _classCallCheck(this, Channel);\n\n    this.state = CHANNEL_STATES.closed;\n    this.topic = topic;\n    this.params = params || {};\n    this.socket = socket;\n    this.bindings = [];\n    this.timeout = this.socket.timeout;\n    this.joinedOnce = false;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.pushBuffer = [];\n    this.rejoinTimer = new Timer(function () {\n      return _this2.rejoinUntilConnected();\n    }, this.socket.reconnectAfterMs);\n    this.joinPush.receive(\"ok\", function () {\n      _this2.state = CHANNEL_STATES.joined;\n      _this2.rejoinTimer.reset();\n      _this2.pushBuffer.forEach(function (pushEvent) {\n        return pushEvent.send();\n      });\n      _this2.pushBuffer = [];\n    });\n    this.onClose(function () {\n      _this2.rejoinTimer.reset();\n      _this2.socket.log(\"channel\", \"close \" + _this2.topic + \" \" + _this2.joinRef());\n      _this2.state = CHANNEL_STATES.closed;\n      _this2.socket.remove(_this2);\n    });\n    this.onError(function (reason) {\n      if (_this2.isLeaving() || _this2.isClosed()) {\n        return;\n      }\n      _this2.socket.log(\"channel\", \"error \" + _this2.topic, reason);\n      _this2.state = CHANNEL_STATES.errored;\n      _this2.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive(\"timeout\", function () {\n      if (!_this2.isJoining()) {\n        return;\n      }\n      _this2.socket.log(\"channel\", \"timeout \" + _this2.topic + \" (\" + _this2.joinRef() + \")\", _this2.joinPush.timeout);\n      var leavePush = new Push(_this2, CHANNEL_EVENTS.leave, {}, _this2.timeout);\n      leavePush.send();\n      _this2.state = CHANNEL_STATES.errored;\n      _this2.joinPush.reset();\n      _this2.rejoinTimer.scheduleTimeout();\n    });\n    this.on(CHANNEL_EVENTS.reply, function (payload, ref) {\n      _this2.trigger(_this2.replyEventName(ref), payload);\n    });\n  }\n\n  _createClass(Channel, [{\n    key: \"rejoinUntilConnected\",\n    value: function rejoinUntilConnected() {\n      this.rejoinTimer.scheduleTimeout();\n      if (this.socket.isConnected()) {\n        this.rejoin();\n      }\n    }\n  }, {\n    key: \"join\",\n    value: function join() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n      if (this.joinedOnce) {\n        throw \"tried to join multiple times. 'join' can only be called a single time per channel instance\";\n      } else {\n        this.joinedOnce = true;\n        this.rejoin(timeout);\n        return this.joinPush;\n      }\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this.on(CHANNEL_EVENTS.close, callback);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(callback) {\n      this.on(CHANNEL_EVENTS.error, function (reason) {\n        return callback(reason);\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      this.bindings.push({ event: event, callback: callback });\n    }\n  }, {\n    key: \"off\",\n    value: function off(event) {\n      this.bindings = this.bindings.filter(function (bind) {\n        return bind.event !== event;\n      });\n    }\n  }, {\n    key: \"canPush\",\n    value: function canPush() {\n      return this.socket.isConnected() && this.isJoined();\n    }\n  }, {\n    key: \"push\",\n    value: function push(event, payload) {\n      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n      if (!this.joinedOnce) {\n        throw \"tried to push '\" + event + \"' to '\" + this.topic + \"' before joining. Use channel.join() before pushing events\";\n      }\n      var pushEvent = new Push(this, event, payload, timeout);\n      if (this.canPush()) {\n        pushEvent.send();\n      } else {\n        pushEvent.startTimeout();\n        this.pushBuffer.push(pushEvent);\n      }\n\n      return pushEvent;\n    }\n\n    /** Leaves the channel\n     *\n     * Unsubscribes from server events, and\n     * instructs channel to terminate on server\n     *\n     * Triggers onClose() hooks\n     *\n     * To receive leave acknowledgements, use the a `receive`\n     * hook to bind to the server ack, ie:\n     *\n     * ```javascript\n     *     channel.leave().receive(\"ok\", () => alert(\"left!\") )\n     * ```\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      var _this3 = this;\n\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n      this.state = CHANNEL_STATES.leaving;\n      var onClose = function onClose() {\n        _this3.socket.log(\"channel\", \"leave \" + _this3.topic);\n        _this3.trigger(CHANNEL_EVENTS.close, \"leave\");\n      };\n      var leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive(\"ok\", function () {\n        return onClose();\n      }).receive(\"timeout\", function () {\n        return onClose();\n      });\n      leavePush.send();\n      if (!this.canPush()) {\n        leavePush.trigger(\"ok\", {});\n      }\n\n      return leavePush;\n    }\n\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling\n     * before dispatching to the channel callbacks.\n     *\n     * Must return the payload, modified or unmodified\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event, payload, ref) {\n      return payload;\n    }\n\n    // private\n\n  }, {\n    key: \"isMember\",\n    value: function isMember(topic, event, payload, joinRef) {\n      if (this.topic !== topic) {\n        return false;\n      }\n      var isLifecycleEvent = CHANNEL_LIFECYCLE_EVENTS.indexOf(event) >= 0;\n\n      if (joinRef && isLifecycleEvent && joinRef !== this.joinRef()) {\n        this.socket.log(\"channel\", \"dropping outdated message\", { topic: topic, event: event, payload: payload, joinRef: joinRef });\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"joinRef\",\n    value: function joinRef() {\n      return this.joinPush.ref;\n    }\n  }, {\n    key: \"sendJoin\",\n    value: function sendJoin(timeout) {\n      this.state = CHANNEL_STATES.joining;\n      this.joinPush.resend(timeout);\n    }\n  }, {\n    key: \"rejoin\",\n    value: function rejoin() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      if (this.isLeaving()) {\n        return;\n      }\n      this.sendJoin(timeout);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(event, payload, ref, joinRef) {\n      var _this4 = this;\n\n      var handledPayload = this.onMessage(event, payload, ref, joinRef);\n      if (payload && !handledPayload) {\n        throw \"channel onMessage callbacks must return the payload, modified or unmodified\";\n      }\n\n      this.bindings.filter(function (bind) {\n        return bind.event === event;\n      }).map(function (bind) {\n        return bind.callback(handledPayload, ref, joinRef || _this4.joinRef());\n      });\n    }\n  }, {\n    key: \"replyEventName\",\n    value: function replyEventName(ref) {\n      return \"chan_reply_\" + ref;\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this.state === CHANNEL_STATES.closed;\n    }\n  }, {\n    key: \"isErrored\",\n    value: function isErrored() {\n      return this.state === CHANNEL_STATES.errored;\n    }\n  }, {\n    key: \"isJoined\",\n    value: function isJoined() {\n      return this.state === CHANNEL_STATES.joined;\n    }\n  }, {\n    key: \"isJoining\",\n    value: function isJoining() {\n      return this.state === CHANNEL_STATES.joining;\n    }\n  }, {\n    key: \"isLeaving\",\n    value: function isLeaving() {\n      return this.state === CHANNEL_STATES.leaving;\n    }\n  }]);\n\n  return Channel;\n}();\n\nvar Serializer = {\n  encode: function encode(msg, callback) {\n    var payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];\n    return callback(JSON.stringify(payload));\n  },\n  decode: function decode(rawPayload, callback) {\n    var _JSON$parse = JSON.parse(rawPayload),\n        _JSON$parse2 = _slicedToArray(_JSON$parse, 5),\n        join_ref = _JSON$parse2[0],\n        ref = _JSON$parse2[1],\n        topic = _JSON$parse2[2],\n        event = _JSON$parse2[3],\n        payload = _JSON$parse2[4];\n\n    return callback({ join_ref: join_ref, ref: ref, topic: topic, event: event, payload: payload });\n  }\n};\n\n/** Initializes the Socket\n *\n *\n * For IE8 support use an ES5-shim (https://github.com/es-shims/es5-shim)\n *\n * @param {string} endPoint - The string WebSocket endpoint, ie, `\"ws://example.com/socket\"`,\n *                                               `\"wss://example.com\"`\n *                                               `\"/socket\"` (inherited host & protocol)\n * @param {Object} opts - Optional configuration\n * @param {string} opts.transport - The Websocket Transport, for example WebSocket or Phoenix.LongPoll.\n *\n * Defaults to WebSocket with automatic LongPoll fallback.\n * @param {Function} opts.encode - The function to encode outgoing messages.\n *\n * Defaults to JSON:\n *\n * ```javascript\n * (payload, callback) => callback(JSON.stringify(payload))\n * ```\n *\n * @param {Function} opts.decode - The function to decode incoming messages.\n *\n * Defaults to JSON:\n *\n * ```javascript\n * (payload, callback) => callback(JSON.parse(payload))\n * ```\n *\n * @param {number} opts.timeout - The default timeout in milliseconds to trigger push timeouts.\n *\n * Defaults `DEFAULT_TIMEOUT`\n * @param {number} opts.heartbeatIntervalMs - The millisec interval to send a heartbeat message\n * @param {number} opts.reconnectAfterMs - The optional function that returns the millsec reconnect interval.\n *\n * Defaults to stepped backoff of:\n *\n * ```javascript\n *  function(tries){\n *    return [1000, 5000, 10000][tries - 1] || 10000\n *  }\n * ```\n * @param {Function} opts.logger - The optional function for specialized logging, ie:\n * ```javascript\n * logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n * ```\n *\n * @param {number}  opts.longpollerTimeout - The maximum timeout of a long poll AJAX request.\n *\n * Defaults to 20s (double the server long poll timer).\n *\n * @param {Object}  opts.params - The optional params to pass when connecting\n *\n *\n*/\n\nvar Socket = exports.Socket = function () {\n  function Socket(endPoint) {\n    var _this5 = this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };\n    this.channels = [];\n    this.sendBuffer = [];\n    this.ref = 0;\n    this.timeout = opts.timeout || DEFAULT_TIMEOUT;\n    this.transport = opts.transport || window.WebSocket || LongPoll;\n    this.defaultEncoder = Serializer.encode;\n    this.defaultDecoder = Serializer.decode;\n    if (this.transport !== LongPoll) {\n      this.encode = opts.encode || this.defaultEncoder;\n      this.decode = opts.decode || this.defaultDecoder;\n    } else {\n      this.encode = this.defaultEncoder;\n      this.decode = this.defaultDecoder;\n    }\n    this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 30000;\n    this.reconnectAfterMs = opts.reconnectAfterMs || function (tries) {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.logger = opts.logger || function () {}; // noop\n    this.longpollerTimeout = opts.longpollerTimeout || 20000;\n    this.params = opts.params || {};\n    this.endPoint = endPoint + \"/\" + TRANSPORTS.websocket;\n    this.heartbeatTimer = null;\n    this.pendingHeartbeatRef = null;\n    this.reconnectTimer = new Timer(function () {\n      _this5.disconnect(function () {\n        return _this5.connect();\n      });\n    }, this.reconnectAfterMs);\n  }\n\n  _createClass(Socket, [{\n    key: \"protocol\",\n    value: function protocol() {\n      return location.protocol.match(/^https/) ? \"wss\" : \"ws\";\n    }\n  }, {\n    key: \"endPointURL\",\n    value: function endPointURL() {\n      var uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params), { vsn: VSN });\n      if (uri.charAt(0) !== \"/\") {\n        return uri;\n      }\n      if (uri.charAt(1) === \"/\") {\n        return this.protocol() + \":\" + uri;\n      }\n\n      return this.protocol() + \"://\" + location.host + uri;\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(callback, code, reason) {\n      if (this.conn) {\n        this.conn.onclose = function () {}; // noop\n        if (code) {\n          this.conn.close(code, reason || \"\");\n        } else {\n          this.conn.close();\n        }\n        this.conn = null;\n      }\n      callback && callback();\n    }\n\n    /**\n     *\n     * @param {Object} params - The params to send when connecting, for example `{user_id: userToken}`\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(params) {\n      var _this6 = this;\n\n      if (params) {\n        console && console.log(\"passing params to connect is deprecated. Instead pass :params to the Socket constructor\");\n        this.params = params;\n      }\n      if (this.conn) {\n        return;\n      }\n\n      this.conn = new this.transport(this.endPointURL());\n      this.conn.timeout = this.longpollerTimeout;\n      this.conn.onopen = function () {\n        return _this6.onConnOpen();\n      };\n      this.conn.onerror = function (error) {\n        return _this6.onConnError(error);\n      };\n      this.conn.onmessage = function (event) {\n        return _this6.onConnMessage(event);\n      };\n      this.conn.onclose = function (event) {\n        return _this6.onConnClose(event);\n      };\n    }\n\n    /**\n     * Logs the message. Override `this.logger` for specialized logging. noops by default\n     * @param {string} kind\n     * @param {string} msg\n     * @param {Object} data\n     */\n\n  }, {\n    key: \"log\",\n    value: function log(kind, msg, data) {\n      this.logger(kind, msg, data);\n    }\n\n    // Registers callbacks for connection state change events\n    //\n    // Examples\n    //\n    //    socket.onError(function(error){ alert(\"An error occurred\") })\n    //\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen(callback) {\n      this.stateChangeCallbacks.open.push(callback);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(callback) {\n      this.stateChangeCallbacks.close.push(callback);\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(callback) {\n      this.stateChangeCallbacks.error.push(callback);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(callback) {\n      this.stateChangeCallbacks.message.push(callback);\n    }\n  }, {\n    key: \"onConnOpen\",\n    value: function onConnOpen() {\n      var _this7 = this;\n\n      this.log(\"transport\", \"connected to \" + this.endPointURL());\n      this.flushSendBuffer();\n      this.reconnectTimer.reset();\n      if (!this.conn.skipHeartbeat) {\n        clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(function () {\n          return _this7.sendHeartbeat();\n        }, this.heartbeatIntervalMs);\n      }\n      this.stateChangeCallbacks.open.forEach(function (callback) {\n        return callback();\n      });\n    }\n  }, {\n    key: \"onConnClose\",\n    value: function onConnClose(event) {\n      this.log(\"transport\", \"close\", event);\n      this.triggerChanError();\n      clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.scheduleTimeout();\n      this.stateChangeCallbacks.close.forEach(function (callback) {\n        return callback(event);\n      });\n    }\n  }, {\n    key: \"onConnError\",\n    value: function onConnError(error) {\n      this.log(\"transport\", error);\n      this.triggerChanError();\n      this.stateChangeCallbacks.error.forEach(function (callback) {\n        return callback(error);\n      });\n    }\n  }, {\n    key: \"triggerChanError\",\n    value: function triggerChanError() {\n      this.channels.forEach(function (channel) {\n        return channel.trigger(CHANNEL_EVENTS.error);\n      });\n    }\n  }, {\n    key: \"connectionState\",\n    value: function connectionState() {\n      switch (this.conn && this.conn.readyState) {\n        case SOCKET_STATES.connecting:\n          return \"connecting\";\n        case SOCKET_STATES.open:\n          return \"open\";\n        case SOCKET_STATES.closing:\n          return \"closing\";\n        default:\n          return \"closed\";\n      }\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this.connectionState() === \"open\";\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(channel) {\n      this.channels = this.channels.filter(function (c) {\n        return c.joinRef() !== channel.joinRef();\n      });\n    }\n  }, {\n    key: \"channel\",\n    value: function channel(topic) {\n      var chanParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var chan = new Channel(topic, chanParams, this);\n      this.channels.push(chan);\n      return chan;\n    }\n  }, {\n    key: \"push\",\n    value: function push(data) {\n      var _this8 = this;\n\n      var topic = data.topic,\n          event = data.event,\n          payload = data.payload,\n          ref = data.ref,\n          join_ref = data.join_ref;\n\n      var callback = function callback() {\n        _this8.encode(data, function (result) {\n          _this8.conn.send(result);\n        });\n      };\n      this.log(\"push\", topic + \" \" + event + \" (\" + join_ref + \", \" + ref + \")\", payload);\n      if (this.isConnected()) {\n        callback();\n      } else {\n        this.sendBuffer.push(callback);\n      }\n    }\n\n    /**\n     * Return the next message ref, accounting for overflows\n     */\n\n  }, {\n    key: \"makeRef\",\n    value: function makeRef() {\n      var newRef = this.ref + 1;\n      if (newRef === this.ref) {\n        this.ref = 0;\n      } else {\n        this.ref = newRef;\n      }\n\n      return this.ref.toString();\n    }\n  }, {\n    key: \"sendHeartbeat\",\n    value: function sendHeartbeat() {\n      if (!this.isConnected()) {\n        return;\n      }\n      if (this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n        this.log(\"transport\", \"heartbeat timeout. Attempting to re-establish connection\");\n        this.conn.close(WS_CLOSE_NORMAL, \"hearbeat timeout\");\n        return;\n      }\n      this.pendingHeartbeatRef = this.makeRef();\n      this.push({ topic: \"phoenix\", event: \"heartbeat\", payload: {}, ref: this.pendingHeartbeatRef });\n    }\n  }, {\n    key: \"flushSendBuffer\",\n    value: function flushSendBuffer() {\n      if (this.isConnected() && this.sendBuffer.length > 0) {\n        this.sendBuffer.forEach(function (callback) {\n          return callback();\n        });\n        this.sendBuffer = [];\n      }\n    }\n  }, {\n    key: \"onConnMessage\",\n    value: function onConnMessage(rawMessage) {\n      var _this9 = this;\n\n      this.decode(rawMessage.data, function (msg) {\n        var topic = msg.topic,\n            event = msg.event,\n            payload = msg.payload,\n            ref = msg.ref,\n            join_ref = msg.join_ref;\n\n        if (ref && ref === _this9.pendingHeartbeatRef) {\n          _this9.pendingHeartbeatRef = null;\n        }\n\n        _this9.log(\"receive\", (payload.status || \"\") + \" \" + topic + \" \" + event + \" \" + (ref && \"(\" + ref + \")\" || \"\"), payload);\n        _this9.channels.filter(function (channel) {\n          return channel.isMember(topic, event, payload, join_ref);\n        }).forEach(function (channel) {\n          return channel.trigger(event, payload, ref, join_ref);\n        });\n        _this9.stateChangeCallbacks.message.forEach(function (callback) {\n          return callback(msg);\n        });\n      });\n    }\n  }]);\n\n  return Socket;\n}();\n\nvar LongPoll = exports.LongPoll = function () {\n  function LongPoll(endPoint) {\n    _classCallCheck(this, LongPoll);\n\n    this.endPoint = null;\n    this.token = null;\n    this.skipHeartbeat = true;\n    this.onopen = function () {}; // noop\n    this.onerror = function () {}; // noop\n    this.onmessage = function () {}; // noop\n    this.onclose = function () {}; // noop\n    this.pollEndpoint = this.normalizeEndpoint(endPoint);\n    this.readyState = SOCKET_STATES.connecting;\n\n    this.poll();\n  }\n\n  _createClass(LongPoll, [{\n    key: \"normalizeEndpoint\",\n    value: function normalizeEndpoint(endPoint) {\n      return endPoint.replace(\"ws://\", \"http://\").replace(\"wss://\", \"https://\").replace(new RegExp(\"(.*)\\/\" + TRANSPORTS.websocket), \"$1/\" + TRANSPORTS.longpoll);\n    }\n  }, {\n    key: \"endpointURL\",\n    value: function endpointURL() {\n      return Ajax.appendParams(this.pollEndpoint, { token: this.token });\n    }\n  }, {\n    key: \"closeAndRetry\",\n    value: function closeAndRetry() {\n      this.close();\n      this.readyState = SOCKET_STATES.connecting;\n    }\n  }, {\n    key: \"ontimeout\",\n    value: function ontimeout() {\n      this.onerror(\"timeout\");\n      this.closeAndRetry();\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var _this10 = this;\n\n      if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {\n        return;\n      }\n\n      Ajax.request(\"GET\", this.endpointURL(), \"application/json\", null, this.timeout, this.ontimeout.bind(this), function (resp) {\n        if (resp) {\n          var status = resp.status,\n              token = resp.token,\n              messages = resp.messages;\n\n          _this10.token = token;\n        } else {\n          var status = 0;\n        }\n\n        switch (status) {\n          case 200:\n            messages.forEach(function (msg) {\n              return _this10.onmessage({ data: msg });\n            });\n            _this10.poll();\n            break;\n          case 204:\n            _this10.poll();\n            break;\n          case 410:\n            _this10.readyState = SOCKET_STATES.open;\n            _this10.onopen();\n            _this10.poll();\n            break;\n          case 0:\n          case 500:\n            _this10.onerror();\n            _this10.closeAndRetry();\n            break;\n          default:\n            throw \"unhandled poll status \" + status;\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(body) {\n      var _this11 = this;\n\n      Ajax.request(\"POST\", this.endpointURL(), \"application/json\", body, this.timeout, this.onerror.bind(this, \"timeout\"), function (resp) {\n        if (!resp || resp.status !== 200) {\n          _this11.onerror(resp && resp.status);\n          _this11.closeAndRetry();\n        }\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.readyState = SOCKET_STATES.closed;\n      this.onclose();\n    }\n  }]);\n\n  return LongPoll;\n}();\n\nvar Ajax = exports.Ajax = function () {\n  function Ajax() {\n    _classCallCheck(this, Ajax);\n  }\n\n  _createClass(Ajax, null, [{\n    key: \"request\",\n    value: function request(method, endPoint, accept, body, timeout, ontimeout, callback) {\n      if (window.XDomainRequest) {\n        var req = new XDomainRequest(); // IE8, IE9\n        this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);\n      } else {\n        var _req = window.XMLHttpRequest ? new window.XMLHttpRequest() : // IE7+, Firefox, Chrome, Opera, Safari\n        new ActiveXObject(\"Microsoft.XMLHTTP\"); // IE6, IE5\n        this.xhrRequest(_req, method, endPoint, accept, body, timeout, ontimeout, callback);\n      }\n    }\n  }, {\n    key: \"xdomainRequest\",\n    value: function xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {\n      var _this12 = this;\n\n      req.timeout = timeout;\n      req.open(method, endPoint);\n      req.onload = function () {\n        var response = _this12.parseJSON(req.responseText);\n        callback && callback(response);\n      };\n      if (ontimeout) {\n        req.ontimeout = ontimeout;\n      }\n\n      // Work around bug in IE9 that requires an attached onprogress handler\n      req.onprogress = function () {};\n\n      req.send(body);\n    }\n  }, {\n    key: \"xhrRequest\",\n    value: function xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {\n      var _this13 = this;\n\n      req.open(method, endPoint, true);\n      req.timeout = timeout;\n      req.setRequestHeader(\"Content-Type\", accept);\n      req.onerror = function () {\n        callback && callback(null);\n      };\n      req.onreadystatechange = function () {\n        if (req.readyState === _this13.states.complete && callback) {\n          var response = _this13.parseJSON(req.responseText);\n          callback(response);\n        }\n      };\n      if (ontimeout) {\n        req.ontimeout = ontimeout;\n      }\n\n      req.send(body);\n    }\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(resp) {\n      if (!resp || resp === \"\") {\n        return null;\n      }\n\n      try {\n        return JSON.parse(resp);\n      } catch (e) {\n        console && console.log(\"failed to parse JSON response\", resp);\n        return null;\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(obj, parentKey) {\n      var queryStr = [];\n      for (var key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n          continue;\n        }\n        var paramKey = parentKey ? parentKey + \"[\" + key + \"]\" : key;\n        var paramVal = obj[key];\n        if ((typeof paramVal === \"undefined\" ? \"undefined\" : _typeof(paramVal)) === \"object\") {\n          queryStr.push(this.serialize(paramVal, paramKey));\n        } else {\n          queryStr.push(encodeURIComponent(paramKey) + \"=\" + encodeURIComponent(paramVal));\n        }\n      }\n      return queryStr.join(\"&\");\n    }\n  }, {\n    key: \"appendParams\",\n    value: function appendParams(url, params) {\n      if (Object.keys(params).length === 0) {\n        return url;\n      }\n\n      var prefix = url.match(/\\?/) ? \"&\" : \"?\";\n      return \"\" + url + prefix + this.serialize(params);\n    }\n  }]);\n\n  return Ajax;\n}();\n\nAjax.states = { complete: 4 };\n\nvar Presence = exports.Presence = {\n  syncState: function syncState(currentState, newState, onJoin, onLeave) {\n    var _this14 = this;\n\n    var state = this.clone(currentState);\n    var joins = {};\n    var leaves = {};\n\n    this.map(state, function (key, presence) {\n      if (!newState[key]) {\n        leaves[key] = presence;\n      }\n    });\n    this.map(newState, function (key, newPresence) {\n      var currentPresence = state[key];\n      if (currentPresence) {\n        var newRefs = newPresence.metas.map(function (m) {\n          return m.phx_ref;\n        });\n        var curRefs = currentPresence.metas.map(function (m) {\n          return m.phx_ref;\n        });\n        var joinedMetas = newPresence.metas.filter(function (m) {\n          return curRefs.indexOf(m.phx_ref) < 0;\n        });\n        var leftMetas = currentPresence.metas.filter(function (m) {\n          return newRefs.indexOf(m.phx_ref) < 0;\n        });\n        if (joinedMetas.length > 0) {\n          joins[key] = newPresence;\n          joins[key].metas = joinedMetas;\n        }\n        if (leftMetas.length > 0) {\n          leaves[key] = _this14.clone(currentPresence);\n          leaves[key].metas = leftMetas;\n        }\n      } else {\n        joins[key] = newPresence;\n      }\n    });\n    return this.syncDiff(state, { joins: joins, leaves: leaves }, onJoin, onLeave);\n  },\n  syncDiff: function syncDiff(currentState, _ref2, onJoin, onLeave) {\n    var joins = _ref2.joins,\n        leaves = _ref2.leaves;\n\n    var state = this.clone(currentState);\n    if (!onJoin) {\n      onJoin = function onJoin() {};\n    }\n    if (!onLeave) {\n      onLeave = function onLeave() {};\n    }\n\n    this.map(joins, function (key, newPresence) {\n      var currentPresence = state[key];\n      state[key] = newPresence;\n      if (currentPresence) {\n        var _state$key$metas;\n\n        (_state$key$metas = state[key].metas).unshift.apply(_state$key$metas, _toConsumableArray(currentPresence.metas));\n      }\n      onJoin(key, currentPresence, newPresence);\n    });\n    this.map(leaves, function (key, leftPresence) {\n      var currentPresence = state[key];\n      if (!currentPresence) {\n        return;\n      }\n      var refsToRemove = leftPresence.metas.map(function (m) {\n        return m.phx_ref;\n      });\n      currentPresence.metas = currentPresence.metas.filter(function (p) {\n        return refsToRemove.indexOf(p.phx_ref) < 0;\n      });\n      onLeave(key, currentPresence, leftPresence);\n      if (currentPresence.metas.length === 0) {\n        delete state[key];\n      }\n    });\n    return state;\n  },\n  list: function list(presences, chooser) {\n    if (!chooser) {\n      chooser = function chooser(key, pres) {\n        return pres;\n      };\n    }\n\n    return this.map(presences, function (key, presence) {\n      return chooser(key, presence);\n    });\n  },\n\n\n  // private\n\n  map: function map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(function (key) {\n      return func(key, obj[key]);\n    });\n  },\n  clone: function clone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n};\n\n/**\n *\n * Creates a timer that accepts a `timerCalc` function to perform\n * calculated timeout retries, such as exponential backoff.\n *\n * ## Examples\n *\n * ```javascript\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n * ```\n * @param {Function} callback\n * @param {Function} timerCalc\n */\n\nvar Timer = function () {\n  function Timer(callback, timerCalc) {\n    _classCallCheck(this, Timer);\n\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = null;\n    this.tries = 0;\n  }\n\n  _createClass(Timer, [{\n    key: \"reset\",\n    value: function reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    }\n\n    /**\n     * Cancels any previous scheduleTimeout and schedules callback\n     */\n\n  }, {\n    key: \"scheduleTimeout\",\n    value: function scheduleTimeout() {\n      var _this15 = this;\n\n      clearTimeout(this.timer);\n\n      this.timer = setTimeout(function () {\n        _this15.tries = _this15.tries + 1;\n        _this15.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n  }]);\n\n  return Timer;\n}();\n\n})));\n"],"sourceRoot":""}